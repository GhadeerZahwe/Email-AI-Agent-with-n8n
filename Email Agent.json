{
  "name": "Email Agent",
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Process Email Data').item.json.from }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        240,
        432
      ],
      "id": "5c3d9a77-1fcc-46cc-b9cd-18b12f6929e6",
      "name": "Conversation Memory"
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "={{ $fromAI('query', 'search query for current information', 'string') }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.perplexityTool",
      "typeVersion": 1,
      "position": [
        496,
        528
      ],
      "id": "2374b29c-c6f2-4968-aba2-6ad6cfd2a171",
      "name": "Perplexity Web Search",
      "credentials": {
        "perplexityApi": {
          "id": "eR5QOjz74RakPAWI",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract only essential email data\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  let emailData = item.json;\n  \n  let senderEmail = '';\n  let senderName = '';\n  let subject = '';\n  let emailBody = '';\n  let toEmail = '';\n  \n  // Extract sender email + name from \"From\" field\n  if (emailData.From) {\n    const fromValue = emailData.From;\n    const emailMatch = fromValue.match(/<([^>]+)>/);\n    senderEmail = emailMatch ? emailMatch[1].trim() : fromValue.trim();\n\n    // Extract display name (everything before <...>)\n    const nameMatch = fromValue.match(/^([^<]+)</);\n    senderName = nameMatch ? nameMatch[1].trim() : senderEmail.split('@')[0];\n  }\n  \n  // Extract recipient email\n  toEmail = emailData.To || '';\n  \n  // Extract subject\n  subject = emailData.Subject || '';\n  \n  // Extract email body (use snippet if available)\n  emailBody = emailData.snippet || emailData.body || emailData.Body || '';\n  \n  // Clean HTML tags if present\n  if (emailBody && typeof emailBody === 'string') {\n    emailBody = emailBody.replace(/<[^>]*>/g, '').trim();\n  }\n  \n  // Convert internal date to Beirut time\n  let beirutTime = '';\n  if (emailData.internalDate) {\n    const emailDate = new Date(parseInt(emailData.internalDate));\n    beirutTime = emailDate.toLocaleString('en-US', {\n      timeZone: 'Asia/Beirut',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  } else {\n    beirutTime = new Date().toLocaleString('en-US', {\n      timeZone: 'Asia/Beirut',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  }\n  \n  processedItems.push({\n    json: {\n      Body: emailBody,\n      subject: subject,\n      from: senderEmail,\n      name: senderName,   // ✅ added sender name\n      to: toEmail,\n      time: beirutTime\n    }\n  });\n}\n\nreturn processedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        224
      ],
      "id": "266016be-3189-4af1-8fd1-a1972f74b5a7",
      "name": "Process Email Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ \"Please read and reply to this email professionally from \" + $('Process Email Data').item.json.name\n+ \":\\n\\nSubject: \" + $('Process Email Data').item.json.subject + \"\\n\\nEmail Content:\\n\" + $('Process Email Data').item.json.Body}}\n",
        "options": {
          "systemMessage": "===================== CURRENT CONTEXT ====================\n- Current date and time: {{ $now.toString() }}\n- Time zone: Asia/Beirut (Lebanon)\n- Email received at: {{ $('Process Email Data').item.json.time }}\n- Sender: {{ $('Process Email Data').item.json.name }}\n\n==================== ROLE ====================\nGhadeer’s AI Email Assistant manages professional communications and calendar scheduling. \nIt processes incoming emails, replies warmly and professionally using the sender's name {{ $('Process Email Data').item.json.name }}, automates scheduling, updates, and cancellations of meetings, and handles general inquiries or research requests.\n\n==================== OBJECTIVE ====================\n- Understand incoming emails and respond professionally, addressing sender by name {{ $('Process Email Data').item.json.name }}.  \n- Schedule, update, and cancel meetings within defined constraints.  \n- Suggest available slots without disclosing private meeting details.  \n- Automate booking on the calendar with proper details.  \n- Answer general inquiries or perform research as required.\n\n==================== CONTEXT ====================\n- Ghadeer requires efficient inbox and calendar management.  \n- Ensures professional, warm communication style.  \n- No disclosure of sensitive/private calendar details.  \n- Meetings only occur during working hours (9 AM – 5 PM, weekdays, Asia/Beirut timezone).  \n- Emails are always addressed to sender by name {{ $('Process Email Data').item.json.name }}, never email.  \n- Calendar slots must be accurate, conflict-free, and presented clearly.\n\n==================== STEP-BY-STEP PROCESS (SOP) ====================\n1. Read & Understand Email\n   - Parse sender name {{ $('Process Email Data').item.json.name }} , request, and intent.\n   - Classify as: meeting request, update, cancellation, general inquiry, or irrelevant/promotion email.\n\n2. If Meeting Request:\n   a. Use \"Calendar Get\" to fetch existing meetings.\n   b. Identify available slots (9:00–17:00, weekdays only, next 2 days unless specified).\n   c. Suggest 3–4 unique, conflict-free slots:\n      - Monday, August 18, 2025: 10:00 – 11:00 AM\n      - Tuesday, August 19, 2025: 2:00 – 3:00 PM\n   d. Wait for confirmation from {{ $('Process Email Data').item.json.name }}).\n   e. Once confirmed, use \"Calendar Create\" with:\n      - Start/End: ISO format, Asia/Beirut timezone.\n      - Summary: Short title based on email purpose (e.g., “Project Discussion”).\n      - Description: “Meeting scheduled via email” + optional purpose.\n      - Location: “Online Meeting.”\n      - Attendee: Sender’s email.\n   f. Confirm booking with all details + Google Calendar link.\n\n3. If Meeting Update:\n   - Use \"Calendar Get\" → find meeting → \"Calendar Update.\"\n   - Confirm updated details with {{ $('Process Email Data').item.json.name }}.\n\n4. If Meeting Cancellation:\n   - Use \"Calendar Get\" → find meeting → \"Calendar Delete.\"\n   - Confirm cancellation with {{ $('Process Email Data').item.json.name }}.\n\n5. If General Inquiry:\n   - Answer directly if simple.\n   - If research needed → use \"Perplexity Web Search.\"\n   - Always reply professionally and warmly using {{ $('Process Email Data').item.json.name }}.\n\n6. If Promotion / Irrelevant Email:\n   - Do NOT reply.\n   - Ignore or archive as appropriate.\n\n==================== INSTRUCTIONS (RULES & RESTRICTIONS) ====================\n- Always address sender by name {{ $('Process Email Data').item.json.name }}, never by email.  \n- Never disclose private meeting details.  \n- Only suggest weekdays, 9–5 (Asia/Beirut time).  \n- Default meeting duration: 60 minutes (ask if 30 preferred).  \n- All dates/times formatted in ISO for the calendar.  \n- Confirm every booking/update/cancellation with {{ $('Process Email Data').item.json.name }}.  \n- Keep tone professional, warm, and concise.  \n- Do not reply to irrelevant or promotional emails.\n\n==================== CRITICAL RULES & ERRORS TO AVOID ====================\n- NEVER schedule meetings on weekends.  \n- NEVER suggest times outside 9 AM – 5 PM.  \n- NEVER disclose sensitive data about existing meetings.  \n- NEVER reply to promotional or unrelated emails.  \n- ALWAYS check calendar availability before suggesting slots.  \n- ALWAYS format dates/times correctly (ISO, Asia/Beirut timezone).  \n- ALWAYS confirm meetings, updates, and cancellations with {{ $('Process Email Data').item.json.name }}.  \n- NEVER double-book or suggest overlapping slots.\n\n==================== TOOLS & SUBAGENTS ====================\n1. Calendar Get\n   - Use: Check existing events and find available slots.\n   - When: Before suggesting times, updates, or cancellations.\n\n2. Calendar Create\n   - Use: Book meetings.\n   - When: After sender confirms a suggested slot.\n\n3. Calendar Update\n   - Use: Modify details of an existing meeting.\n   - When: Sender requests changes.\n\n4. Calendar Delete\n   - Use: Cancel meetings.\n   - When: Sender requests cancellation.\n\n5. Perplexity Web Search\n   - Use: For research-based inquiries.\n   - When: Sender requests info beyond scheduling.\n\n==================== EXAMPLES ====================\nCase 1: New Meeting Request\nEmail: \"Hi, can we have a call next week?\"\nResponse:\n\"Dear {{ $('Process Email Data').item.json.name }},\nI’d be glad to arrange that. Here are some available slots:\n- Monday, August 18, 2025: 10:00 – 11:00 AM\n- Tuesday, August 19, 2025: 2:00 – 3:00 PM\nPlease let me know which works best for you.\"\n\nCase 2: Confirmation\nEmail: \"Tuesday at 11 AM works.\"\nResponse:\n\"Dear {{ $('Process Email Data').item.json.name }},\nGreat! I’ve scheduled our meeting for Tuesday, August 19, 2025, at 11:00 AM (Asia/Beirut time). Here’s your calendar link: [Event Link].\nLooking forward to it!\"\n\nCase 3: Cancellation\nEmail: \"Can you cancel our meeting on Monday?\"\nResponse:\n\"Dear {{ $('Process Email Data').item.json.name }},\nYour meeting on Monday, August 18, 2025, has been canceled. Let me know if you’d like to reschedule.\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        240,
        224
      ],
      "id": "31b05193-b326-4d72-9464-1083cb76a77a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "zahweghadeer@gmail.com",
          "mode": "list",
          "cachedResultName": "zahweghadeer@gmail.com"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        720,
        528
      ],
      "id": "0cc6241f-913a-4988-bcbe-1de850fad5a8",
      "name": "Calendar Get",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "8cLiwV1FpP9Wj0YW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "zahweghadeer@gmail.com",
          "mode": "list",
          "cachedResultName": "zahweghadeer@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "attendees": [
            "={{ $('Gmail Trigger').item.json.From }}"
          ],
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}",
          "location": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Location', ``, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        880,
        528
      ],
      "id": "cca7ebc8-bd00-472f-8351-8ab852a6b976",
      "name": "Calendar Create",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "8cLiwV1FpP9Wj0YW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "zahweghadeer@gmail.com",
          "mode": "list",
          "cachedResultName": "zahweghadeer@gmail.com"
        },
        "eventId": "={{ $fromAI('eventId', 'the ID of the calendar event to update', 'string') }}",
        "updateFields": {
          "description": "={{ $fromAI('newMeetingDescription', '', 'string') }}",
          "end": "={{ DateTime.fromFormat($fromAI('newStartDateTime', 'YYYY-MM-DD HH:mm', 'string'), 'yyyy-MM-dd HH:mm').setZone('Asia/Beirut').plus({minutes: parseInt($fromAI('newDuration', '60', 'string')) || 60}).toISO() }}",
          "start": "={{ DateTime.fromFormat($fromAI('newStartDateTime', 'YYYY-MM-DD HH:mm', 'string'), 'yyyy-MM-dd HH:mm').setZone('Asia/Beirut').toISO() }}",
          "summary": "={{ $fromAI('newMeetingTitle', '', 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1040,
        528
      ],
      "id": "e1ab665d-3089-467c-8f2b-903898b51b78",
      "name": "Calendar Update",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "8cLiwV1FpP9Wj0YW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "zahweghadeer@gmail.com",
          "mode": "list",
          "cachedResultName": "zahweghadeer@gmail.com"
        },
        "eventId": "={{ $fromAI('eventIdToDelete', 'the ID of the calendar event to delete', 'string') }}",
        "options": {
          "sendUpdates": "all"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1200,
        528
      ],
      "id": "a31acf4f-65ba-473e-ab94-e165284d7e97",
      "name": "Calendar Delete",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "8cLiwV1FpP9Wj0YW",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "description": "Use the tool to think about what is needed to create a google calendar event or update it"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1024,
        1296
      ],
      "id": "2d8c0d14-b293-4e21-92e6-1159d47f3ca8",
      "name": "Think"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -304,
        224
      ],
      "id": "56579e1a-2967-479e-908a-1e1a3bcfb905",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "IcJXO2iT5AnMUKJk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        48,
        224
      ],
      "id": "9b382a47-857b-4d18-a873-4aeb7743d742",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $('Gmail Trigger').item.json.id }}",
        "emailType": "text",
        "message": "={{ $json.output }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        704,
        224
      ],
      "id": "3d9480ce-f6a4-4392-a34b-686c88cf2dae",
      "name": "Send Gmail",
      "webhookId": "bcec3748-d2a3-4aaf-9058-37f7ad4bc096",
      "credentials": {
        "gmailOAuth2": {
          "id": "IcJXO2iT5AnMUKJk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        80,
        432
      ],
      "id": "5dab9203-72e7-4dfa-83c1-06c3a4366f7e",
      "name": "OpenAI Model",
      "credentials": {
        "openAiApi": {
          "id": "F3zNVpXAudUkgtIX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 176,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        672,
        512
      ],
      "typeVersion": 1,
      "id": "12a6b683-4507-4847-96c0-cfac94a03f33",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Web Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Process Email Data": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Get": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Create": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Update": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Delete": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        []
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Process Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Gmail": {
      "main": [
        []
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "07b12b3b-1272-4229-98db-e39b85ff1029",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5b0e6a67cedc76556280fadf3adbc87df9618178e64ce10410dd16f182411baf"
  },
  "id": "sySySLEDci5hRTvQ",
  "tags": []
}